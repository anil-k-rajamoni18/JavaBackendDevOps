pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Docker image tag')
    }

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials') 
        SSH_CREDENTIALS = credentials('ssh-ec2-credentials') 
        DOCKER_IMAGE_NAME = 'todo-list-app' 
        EC2_HOST = 'ubuntu@ec2-13-232-241-46.ap-south-1.compute.amazonaws.com' 
        APP_PORT = '5000' 
        DOCKER_REPO = "akumarraj/flask-app"
    }

    stages {
        
        /*stage('Checkout') {
            steps {
                checkout scm
            }
        }
        */

        stage('Build') {
            steps {
                sh 'echo "Building the Flask to-do list application..."'
                sh 'cd projects/todolist-app'
                sh 'pip install -r requirements.txt'
            }
        }

        stage('Test') {
            steps {
                sh 'echo "Running tests..."'
                sh 'cd projects/todolist-app'
                sh 'python -m pytest tests/'
            }
        }

        stage('PyLint') {
            steps {
                sh 'echo "Running PyLint..."'
                sh 'cd projects/todolist-app'
                sh 'pylint app.py' 
            }
        }

        stage('Docker Build and Push') {
            steps {
                script {
                    sh 'echo "Building Docker image..."'
                    sh 'cd projects/todolist-app'
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${params.DOCKER_IMAGE_TAG} ."

                    sh 'echo "Logging into Docker Hub..."'
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                    }

                    sh 'echo "Tagging Docker image"'
                    sh "docker tag ${DOCKER_IMAGE_NAME}:${params.DOCKER_IMAGE_TAG} ${DOCKER_REPO}:${params.DOCKER_IMAGE_TAG}"

                    sh 'echo "Pushing Docker image to Docker Hub..."'
                    sh "docker push ${DOCKER_REPO}:${params.DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS]) {
                        // Pull the Docker image on the EC2 instance
                        sh """
                            ssh -o StrictHostKeyChecking=no ${EC2_HOST} \
                            "docker pull ${DOCKER_REPO}:${params.DOCKER_IMAGE_TAG}"
                        """

                        // Stop and remove any existing container with the same name
                        sh """
                            ssh -o StrictHostKeyChecking=no ${EC2_HOST} \
                            "docker stop todo-list-app || true && docker rm todo-list-app || true"
                        """

                        // Run the Docker container on the EC2 instance
                        sh """
                            ssh -o StrictHostKeyChecking=no ${EC2_HOST} \
                            "docker run -d --name todo-list-app -p ${APP_PORT}:${APP_PORT} ${DOCKER_REPO}:${params.DOCKER_IMAGE_TAG}"
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
            emailext (
                subject: 'Pipeline Success: Flask To-Do List App',
                body: 'The Jenkins pipeline for the Flask to-do list app completed successfully.',
                to: 'akrajdev18@gmail.com'
            )
        }
        failure {
            echo 'Pipeline failed!'
            emailext (
                subject: 'Pipeline Failed: Flask To-Do List App',
                body: 'The Jenkins pipeline for the Flask to-do list app failed. Please check the logs for more details.',
                to: 'akrajdev18@gmail.com'
            )
        }
    }
}