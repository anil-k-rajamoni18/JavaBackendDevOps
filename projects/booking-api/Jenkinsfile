pipeline {
    agent any

    parameters {
        string(name: 'IMG_VERSION', defaultValue: '0.0.1', description: 'Img Version to deploy')
    }
    stages {
        stage('Build') {
            steps {
                echo 'Building the SpringBoot Gradle project...'
                dir('projects/booking-api') {
                    sh './gradlew clean build'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running unit tests...'
                dir('projects/booking-api') {
                    sh './gradlew test'
                }
            }
            post {
                always {
                    // Publish JUnit test results
                    junit '**/build/test-results/test/*.xml'

                    // Publish JaCoCo coverage report
                    jacoco(
                        execPattern: '**/build/jacoco/*.exec',
                        classPattern: '**/build/classes/java/main',
                        sourcePattern: '**/src/main/java',
                        exclusionPattern: '**/src/test/*'
                    )

                    // Optional: Archive HTML test reports
                    archiveArtifacts artifacts: '**/build/reports/tests/test/index.html', fingerprint: true
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir("projects/booking-api") {
                    echo "building the docker image"
                    sh "docker build -t akumarraj/booking-api:${params.IMG_VERSION} ."
                }
            }
        }

        stage('Docker Push') {
            steps {
               dir("projects/booking-api"){
                    echo "pushing the docker image"
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                          sh "docker login -u $USERNAME -p $PASSWORD"
                          sh "docker push akumarraj/booking-api:${params.IMG_VERSION}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                dir('projects/booking-api') {
                    script {
                        sshagent(credentials: ['ssh-ec2-credentials']) {
                            sh 'ssh -o StrictHostKeyChecking=no ubuntu@ec2-13-235-80-222.ap-south-1.compute.amazonaws.com "cd /home/ubuntu/projects && docker pull akumarraj/booking-api:latest && docker stop book-container || true && docker rm book-container || true && docker run -d -p 8080:8080 --name book-container akumarraj/booking-api:latest"'
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up workspace...'
            cleanWs() // Delete the workspace
        }
    }
}