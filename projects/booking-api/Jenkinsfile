pipeline {
    agent any

    parameters {
        string(name: 'IMG_VERSION', defaultValue: '0.0.1', description: 'Img Version to deploy')
    }


    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials') 
        SSH_CREDENTIALS = credentials('ssh-ec2-credentials') 
        DOCKER_IMAGE_NAME = 'book-api' 
        EC2_HOST = 'ubuntu@ec2-43-204-227-39.ap-south-1.compute.amazonaws.com' 
        APP_PORT = '8080' 
        DOCKER_REPO = "akumarraj/booking-api"
    }

    stages {
        stage('Build') {
            steps {
                echo 'Building the SpringBoot Gradle project...'
                dir('projects/booking-api') {
                    sh './gradlew clean build'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running unit tests...'
                dir('projects/booking-api') {
                    sh './gradlew test'
                }
            }
            post {
                always {
                    // Publish JUnit test results
                    junit '**/build/test-results/test/*.xml'

                    // Publish JaCoCo coverage report
                    jacoco(
                        execPattern: '**/build/jacoco/*.exec',
                        classPattern: '**/build/classes/java/main',
                        sourcePattern: '**/src/main/java',
                        exclusionPattern: '**/src/test/*'
                    )

                    // Optional: Archive HTML test reports
                    archiveArtifacts artifacts: '**/build/reports/tests/test/index.html', fingerprint: true
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir("projects/booking-api") {
                    echo "building the docker image"
                    sh "docker build -t ${DOCKER_REPO}:${params.IMG_VERSION} ."
                }
            }
        }

        stage('Docker Push') {
            steps {
               dir("projects/booking-api"){
                    sh 'echo "Logging into Docker Hub..."'
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"

                        
                        sh 'echo "Pushing Docker image to Docker Hub..."'
                        sh "docker push ${DOCKER_REPO}:${params.DOCKER_IMAGE_TAG}"
                    }

                }
            }
        }

        stage('Deploy') {
            steps {
                dir('projects/booking-api') {
                    script {
                        sshagent(credentials: ['ssh-ec2-credentials']) {

                        // Pull the Docker image on the EC2 instance
                        sh """
                            ssh -o StrictHostKeyChecking=no ${EC2_HOST} \
                            "docker pull ${DOCKER_REPO}:${params.DOCKER_IMAGE_TAG}"
                        """

                        // Stop and remove any existing container with the same name
                        sh """
                            ssh -o StrictHostKeyChecking=no ${EC2_HOST} \
                            "docker stop book-api-container || true && docker rm book-api-container || true"
                        """

                        // Run the Docker container on the EC2 instance
                        sh """
                            ssh -o StrictHostKeyChecking=no ${EC2_HOST} \
                            "docker run -d --name book-api-container -p ${APP_PORT}:${APP_PORT} ${DOCKER_REPO}:${params.DOCKER_IMAGE_TAG}"
                        """

                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            echo 'Cleaning up workspace...'
            cleanWs() // Delete the workspace
        }
    }
}