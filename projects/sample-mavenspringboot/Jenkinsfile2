@Library('my-shared-library') _
pipeline {
    agent any
    parameters {
        string(name: 'VERSION', defaultValue: '1.0', description: 'Version to Build&Deploy')
    }

    stages {
        stage('Build') {
            steps {
                dir('projects/sample-mavenspringboot') {
                    //sh './mvnw clean install'
                    buildApp(${params.VERSION})
                }
            }
        }

        stage('Test') {
            steps {
                dir('projects/sample-mavenspringboot') {
                    //sh './mvnw test'
                    testApp()
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: '**/target/surefire-reports/*.xml', allowEmptyArchive: true
                }
            }
        }

        stage('Set Deploy Environment') {
            steps {
                script {
                    if (env.BRANCH_NAME.startsWith('feature/')) {
                        env.DEPLOY_ENV = 'development'
                    } else if (env.BRANCH_NAME.startsWith('integration/')) {
                        env.DEPLOY_ENV = 'test'
                    } else if (env.BRANCH_NAME.startsWith('release/')) {
                        env.DEPLOY_ENV = 'stage'
                    } else if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'main') {
                        env.DEPLOY_ENV = 'production'
                    } else {
                        env.DEPLOY_ENV = 'unknown'
                    } 
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "Branch name: ${env.BRANCH_NAME}"
                    //echo "Deploying to ${env.DEPLOY_ENV}"
                    deployApp(${env.DEPLOY_ENV})
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed'
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}